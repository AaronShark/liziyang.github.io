{"version":3,"sources":["todo/app/core.cljs"],"mappings":"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","names":["js/todo","js/todo.app","js/todo.app.core","js/todo.app.core.db","todo.app.core/db","reagent.core.atom","cljs.core/sorted-map","js/todo.app.core.todos","todo.app.core/todos","reagent.core/cursor","js/todo.app.core.showing","todo.app.core/showing","todo.app.core/local-store-key","todo.app.core/todos->local-store","js/localStorage","cljs.core/deref","todo.app.core/local-store->todos","edn-map-todos","unsorted-todos","G__33877","cljs.reader.read_string","sorted-todos","cljs.core.into","cljs.core/reset!","cljs.core/add-watch","key","_atom","_old-state","new-state","cljs.core.println","cljs.pprint.pprint","todo.app.core/allocate-next-id","todos","cljs.core.fnil","cljs.core/inc","cljs.core/last","cljs.core/keys","todo.app.core/set-showing","kw","todo.app.core/add-todo","text","id","new-todo","cljs.core.swap_BANG_","cljs.core/assoc","todo.app.core/toggle-done","cljs.core/update-in","cljs.core/not","todo.app.core/save-todo","title","cljs.core/assoc-in","todo.app.core/delete-todo","cljs.core/dissoc","todo.app.core/complete-all-toggle","b","cljs.core/not-every?","cljs.core/vals","g","m","ids","updated-todos","cljs.core.reduce","todo.app.core/clear-completed","done-ids","cljs.core.filter","cljs.core.map","todo.app.core/hook-browser-navigation!","G__33878","js/goog.history.Html5History","goog.events/listen","goog.history.EventType/NAVIGATE","event","secretary.core/dispatch!","todo.app.core/app-routes","secretary.core/set-config!","action__27635__auto__","params__27636__auto__","cljs.core/map?","map__33879","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core/vector?","vec__33881","secretary.core/add-route!","map__33884","cljs.core.get","vec__33886","cljs.core.nth","filter","cljs.core.keyword","p__33893","map__33894","todo.app.core/todo-input","on-save","on-stop","p1__33889#","p1__33890#","input-text","update-text","stop","save","trimmed-text","clojure.string/trim","cljs.core/empty?","key-pressed","G__33896","p__33897","map__33898","p1__33891#","p1__33892#","class","placeholder","todo.app.core/task-entry","todo.app.core/todo-item","editing","p__33900","map__33901","done","todo.app.core/task-list","items","filter-fn","G__33903","cljs.core/Keyword","js/Error","cljs.core/complement","cljs.core/identity","visible-items","all-complete?","cljs.core/every?","iter__4529__auto__","s__33905","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__33907","cljs.core/chunk-buffer","i__33906","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33904","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","todo","todo.app.core/footer-controls","done-count","active-count","props-for","cljs.core._EQ_","cljs.core/name","G__33908","todo.app.core/todo-app","todo.app.core/render","reagent.dom.render","js/document","todo.app.core/main","todo.app.core/reload!","cljs.core/chunk-first"],"sourcesContent":["(ns todo.app.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]\n            [cljs.pprint :as pp]\n            [cljs.reader :as reader]\n            [secretary.core :as secretary :refer-macros [defroute]]\n            [goog.events :as gevents]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Html5History))\n\n;; --- App State ----\n\n(defonce db (r/atom {:todos (sorted-map)\n                     :showing :all}))\n\n(defonce todos (r/cursor db [:todos]))\n\n(defonce showing (r/cursor db [:showing]))\n\n;; --- Local Storage ----\n\n(def local-store-key \"todo-app\")\n\n(defn todos->local-store []\n  (.setItem js/localStorage local-store-key (str @todos)))\n\n(defn local-store->todos []\n  (let [edn-map-todos (.getItem js/localStorage local-store-key)\n        unsorted-todos (some->> edn-map-todos reader/read-string)\n        sorted-todos (into (sorted-map) unsorted-todos)]\n    (reset! todos sorted-todos)))\n\n;; --- Watch the State ----\n\n(add-watch todos :todos\n           (fn [key _atom _old-state new-state]\n             (todos->local-store)\n             (println \"---\" key \"atom changed ---\")\n             (pp/pprint new-state)))\n\n;; --- Utilities ----\n\n(defn allocate-next-id [todos]\n  ((fnil inc 0) (last (keys todos))))\n\n(defn set-showing [kw]\n  (reset! showing kw))\n\n(defn add-todo [text]\n  (let [id (allocate-next-id @todos)\n        new-todo {:id id, :title text, :done false}]\n    (swap! todos assoc id new-todo)))\n\n(defn toggle-done [id]\n  (swap! todos update-in [id :done] not))\n\n(defn save-todo [id title]\n  (swap! todos assoc-in [id :title] title))\n\n(defn delete-todo [id]\n  (swap! todos dissoc id))\n\n(defn complete-all-toggle []\n  (let [b (not-every? :done (vals @todos))\n        g (fn [m id]\n            (assoc-in m [id :done] b))\n        ids (keys @todos)\n        updated-todos (reduce g @todos ids)]\n    (reset! todos updated-todos)))\n\n(defn clear-completed []\n  (let [done-ids (->> (vals @todos)\n                      (filter :done)\n                      (map :id))\n        updated-todos (reduce dissoc @todos done-ids)]\n    (reset! todos updated-todos)))\n\n;; --- Hash-based Routing ----\n\n(defn hook-browser-navigation! []\n  (doto (Html5History.)\n    (gevents/listen\n     EventType/NAVIGATE\n     (fn [event]\n       (secretary/dispatch! (.. ^js event -token))))\n    (.setEnabled true)))\n\n(defn app-routes []\n  (secretary/set-config! :prefix \"#\")\n  (defroute \"/\" [] (set-showing :all))\n  (defroute \"/:filter\" [filter] (set-showing (keyword filter)))\n  (hook-browser-navigation!))\n\n\n;; --- Initialize App with Sample Data ----\n\n#_(defonce init (do)\n                (add-todo \"Do laundry\")\n                (add-todo \"Wash dishes\")\n                (add-todo \"Buy groceries\"))\n\n\n;; --- Views ----\n\n(defn todo-input [{:keys [title on-save on-stop]}]\n  (let [input-text (r/atom title)\n        update-text #(reset! input-text %)\n        stop #(do (reset! input-text \"\")\n                  (when on-stop (on-stop)))\n        save #(let [trimmed-text (-> @input-text str str/trim)]\n                (if-not (empty? trimmed-text) (on-save trimmed-text))\n                (stop))\n        key-pressed #(case %\n                       \"Enter\" (save)\n                       \"Esc\" (stop)\n                       \"Escape\" (stop)\n                       nil)]\n    (fn [{:keys [class placeholder]}]\n      [:input {:class class\n               :placeholder placeholder\n               :auto-focus true\n               :type \"text\"\n               :value @input-text\n               :on-blur save\n               :on-change #(update-text (.. % -target -value))\n               :on-key-down #(key-pressed (.. % -key))}])))\n\n(defn task-entry []\n  [:header.header\n   [:h1 \"todos\"]\n   [todo-input {:class \"new-todo\"\n                :placeholder \"What needs to be done?\"\n                :on-save add-todo}]])\n\n(defn todo-item []\n  (let [editing (r/atom false)]\n    (fn [{:keys [id title done]}]\n      [:li {:class (str (when done \"completed\")\n                        (when @editing \"editing\"))}\n       [:div.views\n        [:input {:class \"toggle\"\n                 :type \"checkbox\"\n                 :checked done\n                 :on-change #(toggle-done id)}]\n        [:label {:on-double-click #(reset! editing true)} title]\n        [:button.destroy {:on-click #(delete-todo id)}]]\n       (when @editing\n         [todo-input {:class \"edit\"\n                      :title title\n                      :on-save (fn [text] (save-todo id text))\n                      :on-stop #(reset! editing false)}])])))\n\n(defn task-list []\n  (let [items (vals @todos)\n        filter-fn (case @showing\n                    :done :done\n                    :active (complement :done)\n                    :all identity)\n        visible-items (filter filter-fn items)\n        all-complete? (every? :done items)]\n    [:section.main\n     [:input {:id \"toggle-all\"\n              :class \"toggle-all\"\n              :type \"checkbox\"\n              :checked all-complete?\n              :on-change complete-all-toggle}]\n     [:label {:for \"toggle-all\"} \"Mark all as complete\"]\n     [:ul.todo-list\n      (for [todo visible-items]\n        ^{:key (:id todo)} [todo-item todo])]]))\n\n(defn footer-controls []\n  (let [items (vals @todos)\n        done-count (count (filter :done items))\n        active-count (- (count items) done-count)\n        props-for (fn [kw]\n                    {:class (when (= kw @showing) \"selected\")\n                     :on-click #(reset! showing kw)\n                     :href (str \"#/\" (name kw))})]\n    [:footer.footer\n     [:span.todo-count\n      [:strong active-count] \" \" (case active-count 1 \"item\" \"items\") \" left\"]\n     [:ul.filters\n      [:li [:a (props-for :all) \"All\"]]\n      [:li [:a (props-for :active) \"Active\"]]\n      [:li [:a (props-for :done) \"Completd\"]]]\n     (when (pos? done-count)\n       [:button.clear-completed {:on-click clear-completed} \"Clear completed\"])]))\n\n(defn todo-app []\n  [:div\n   [:section.todoapp\n    [task-entry]\n    (when (seq @todos)\n      [:div\n       [task-list]\n       [footer-controls]])]\n   [:footer.info\n    [:p \"Double-click to edit a todo\"]]])\n\n\n;; --- Render ----\n\n\n(defn render []\n  (rdom/render [todo-app] (.getElementById js/document \"root\")))\n\n(defn ^:export main []\n  (local-store->todos)\n  (app-routes)\n  (render))\n\n(defn ^:dev/after-load reload! []\n  (render))\n"]}